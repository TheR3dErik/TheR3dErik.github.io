{"version":3,"sources":["util/ArticleCard.tsx","pages/quadtrees/thumbnail.png","pages/mandelbrot/thumbnail.png","pages/conductors/thumbnail.png","pages/photomosaic/thumbnail.jpg","pages/mspaintmatrix/thumbnail.png","MainPage.tsx","util/Canvas.tsx","util/Vector2D.tsx","pages/conductors/Conductors.tsx","pages/quadtrees/Quadtrees.tsx","pages/mspaintmatrix/stockphotosign.jpg","pages/mspaintmatrix/step1.png","pages/mspaintmatrix/step2.png","pages/mspaintmatrix/step3.png","pages/mspaintmatrix/step4.png","pages/mspaintmatrix/finalresult.png","pages/mspaintmatrix/bobross.jpg","pages/mspaintmatrix/MsPaintMatrix.tsx","pages/photomosaic/trenchpicoriginal.jpg","pages/photomosaic/otherphotomosaictries/try1.jpg","pages/photomosaic/otherphotomosaictries/try2.jpg","pages/photomosaic/otherphotomosaictries/try3.jpg","pages/photomosaic/otherphotomosaictries/try5_a.jpg","pages/photomosaic/otherphotomosaictries/hereitis_secondposter.jpg","pages/photomosaic/PhotoMosaic.tsx","pages/mandelbrot/Mandelbrot.tsx","index.tsx"],"names":["ArticleCard","link","img","alttext","caption","to","className","src","alt","MainPage","useEffect","document","title","quadtreethumbnail","mandelbrotthumbnail","conductorsthumbnail","photomosaicthumbnail","mspaintmatrixthumbnail","Canvas","renderFunc","width","height","mouseDown","mouseUp","mouseMove","mouseWheel","mouseOut","keyDown","keyUp","contextType","ref","useRef","requestid","canvas","current","context","getContext","undefined","addEventListener","window","render","requestAnimationFrame","cancelAnimationFrame","Vec2D","x","y","this","Math","sqrt","n","pow","v","s","Charge","pos","charge","fixed","vel","c","fillStyle","beginPath","arc","PI","fill","lineWidth","strokeStyle","moveTo","lineTo","stroke","other_charge","r","sub","accel","len_n","mul","charges","conductor_radius","draw","fillRect","accels","i","length","j","add","calc_accel","push","centervec","len","n_vel_vec","dot","conductor_vec","forEach","arrayItem","NodeType","Conductors","init","MsPaintMatrix","original_width_field_ref","original_height_field_ref","angle_field_ref","second_angle_field_ref","slider_ref","useState","calcWidthText","setCalcWidthText","calcHeightText","setCalcHeightText","bobross_ref","smallimgstyle","medimgstyle","onTextFieldChange","widthfield","parseInt","value","heightfield","anglefield","round","cos","lerp","a","b","t","style","stockphotosign","step1","defaultValue","onChange","type","id","min","max","step2","step3","step4","finalresult","latex","href","scalar","setTransform","clearRect","slidervalue","angle","transform","tan","drawImage","step","textAlign","display","bobrossimg","PhotoMosaic","trenchpicoriginal","try1","try2","try3","try5_a","secondposter","MandelBrot","CANVAS_WIDTH","CANVAS_HEIGHT","left","right","up","down","dragging","lastx","lasty","translate","deltax","deltay","camWidth","camHeight","zoom","magnify","cameraLoc","vertexPosLoc","loadShader","gl","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","deleteShader","shaderProgram","vsSource","fsSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initShaderProgram","getAttribLocation","getUniformLocation","buffer","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","positions","bufferData","Float32Array","STATIC_DRAW","initBuffers","vertexAttribPointer","FLOAT","enableVertexAttribArray","useProgram","clearColor","clear","COLOR_BUFFER_BIT","uniform4f","drawArrays","TRIANGLES","e","console","log","offsetX","offsetY","deltaY","key","typeColors","selectedType","Quadtree","depthCap","centerx","centery","root","bufferContext","QuadtreeNode","createElement","ctx","drawGrid","globalCompositeOperation","targetDepth","handleClick","mousex","mousey","drawHoverbox","cursorx","cursory","maxDepth","depth","getType","MIXED_TYPE","getChild","node","getNodeAt","getLeftNeighbors","selected","fillColor","start","startingColor","queue","shift","setType","neighbors","getTopNeighbors","includes","getBottomNeighbors","getRightNeighbors","consolidate","children","index","nodeList","getTopChildren","getBottomChildren","getLeftChildren","getRightChildren","tree","bctx","Quadtrees","quadtree","brushSize","colorButtons","onClick","name","backgroundColor","htmlFor","floodFill","target","checked","bind","defaultChecked","ReactDOM","StrictMode","exact","path","component","Mandelbrot","getElementById"],"mappings":"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","file":"static/js/main.74c6a4a0.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\ninterface Props {\n    link: string;\n    img: string;\n    alttext: string;\n    caption: string;\n}\n\nexport const ArticleCard: React.FC<Props> = ({link, img, alttext, caption}) => {\n    return (\n        <Link to={link}>\n            <article className=\"cardArticle\">\n                <img className=\"cardThumbnail\" src={img} alt={alttext} />\n                <h4 className=\"cardCaption\">{caption}</h4>\n            </article>\n        </Link>\n    )\n}\n\nexport default ArticleCard;","export default __webpack_public_path__ + \"static/media/thumbnail.049e0926.png\";","export default __webpack_public_path__ + \"static/media/thumbnail.2cbdb989.png\";","export default __webpack_public_path__ + \"static/media/thumbnail.b0b271eb.png\";","export default __webpack_public_path__ + \"static/media/thumbnail.b8d80bc2.jpg\";","export default __webpack_public_path__ + \"static/media/thumbnail.7940be22.png\";","import React, { useEffect } from 'react';\n\nimport ArticleCard from './util/ArticleCard';\n\nimport quadtreethumbnail from './pages/quadtrees/thumbnail.png'\nimport mandelbrotthumbnail from './pages/mandelbrot/thumbnail.png'\nimport conductorsthumbnail from './pages/conductors/thumbnail.png'\nimport photomosaicthumbnail from './pages/photomosaic/thumbnail.jpg'\nimport mspaintmatrixthumbnail from './pages/mspaintmatrix/thumbnail.png'\n\nexport const MainPage = () => {\n    useEffect(() => {\n        document.title = \"Erik's Website\";\n    });\n\n    return (\n        <div className=\"mainContent\">\n\t\t\t<h1>My Personal Projects</h1>\n\t\t\t<p>My name is Erik Scarlatescu and this is a site where I post about different things I work on in my free time.\n                I'm intensely curious and always finding something new to experiment with.\n\t\t\t</p>\n            <div className=\"cardRow\">\n                <ArticleCard link=\"/quadtrees\" img={quadtreethumbnail} caption=\"Voxel octrees (and pixel quadtrees)\" alttext=\"Thumbnail showing screenshot of interactive quadtree on the page.\"/>\n                <ArticleCard link=\"/mandelbrot\" img={mandelbrotthumbnail} caption=\"Visualizing mandelbrot set in browser\" alttext=\"Thumbnail showing screenshot of interactive quadtree on the page.\"/>\n                <ArticleCard link=\"/conductors\" img={conductorsthumbnail} caption=\"Visualizing point charges in electrostatic conductors\" alttext=\"Thumbnail showing screenshot of interactive quadtree on the page.\"/>\n                <ArticleCard link=\"/photomosaic\" img={photomosaicthumbnail} caption=\"Photo mosaic generator for history project\" alttext=\"Thumbnail showing screenshot of interactive quadtree on the page.\"/>\n                <ArticleCard link=\"/mspaintmatrix\" img={mspaintmatrixthumbnail} caption=\"How to actually rotate text in Microsoft Paint\" alttext=\"Thumbnail showing screenshot of interactive quadtree on the page.\"/>\n            </div>\n        </div>\n    );\n}\n\nexport default MainPage;","import React, { useEffect, useRef } from 'react'\n\ninterface Props {\n    renderFunc: ((ctx: WebGL2RenderingContext, w: number, h: number) => void)\n        | ((ctx: CanvasRenderingContext2D, w: number, h: number) => void);\n    width: number;\n    height: number;\n    contextType: string;\n\n    mouseDown?: (e: MouseEvent) => void;\n    mouseUp?: (e: MouseEvent) => void;\n    mouseMove?: (e: MouseEvent) => void;\n    mouseWheel?: (e: WheelEvent) => void;\n    mouseOut?: (e: MouseEvent) => void;\n    keyDown?: (e: KeyboardEvent) => void;\n    keyUp?: (e: KeyboardEvent) => void;\n}\n\n// react and typescript-friendly wrapper for HTML5 canvas\nexport const Canvas: React.FC<Props> = ({renderFunc, width, height, mouseDown, mouseUp, mouseMove, mouseWheel, mouseOut, keyDown, keyUp, contextType}) => {\n    const ref = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        let canvas = ref.current as any;\n        // this doesn't seem advisable, but it still appears to be the most concise fix\n        //let context = canvas.getContext('2d') as CanvasRenderingContext2D;\n        let context = canvas.getContext(contextType);\n\n        // initialize event listeners:\n        if (mouseDown !== undefined) {\n            canvas.addEventListener('mousedown', mouseDown);\n        }\n        if (mouseUp !== undefined) {\n            canvas.addEventListener('mouseup', mouseUp);\n        }\n        if (mouseMove !== undefined) {\n            canvas.addEventListener('mousemove', mouseMove);\n        }\n        if (mouseWheel !== undefined) {\n            canvas.addEventListener('mousewheel', mouseWheel);\n        }\n        if (mouseOut !== undefined) {\n            canvas.addEventListener('mouseout', mouseOut);\n        }\n        if (keyDown !== undefined) {\n            window.addEventListener('keydown', keyDown);\n        }\n        if (keyUp !== undefined) {\n            window.addEventListener('keyup', keyUp);\n        }\n\n        let requestid: number;\n        const render = () => {\n            renderFunc(context, width, height);\n            requestid = requestAnimationFrame(render);\n        }\n        render();\n\n        // cleanup\n        return () => {\n            cancelAnimationFrame(requestid);\n        }\n    });\n    return (\n        <canvas \n            ref={ref}\n            width={width}\n            height={height}\n        />\n    );\n}\n\nexport default Canvas","class Vec2D {\n    x: number;\n    y: number;\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    len(): number {\n        return Math.sqrt(this.x*this.x + this.y*this.y);\n    }\n\n    len_n(n: number): number {\n        return Math.pow(this.x*this.x + this.y*this.y, n*0.5)\n    }\n\n    add(v: Vec2D): Vec2D {\n        return new Vec2D(this.x + v.x, this.y + v.y)\n    }\n\n    sub(v: Vec2D): Vec2D {\n        return new Vec2D(this.x - v.x, this.y - v.y)\n    }\n\n    mul(s: number): Vec2D {\n        return new Vec2D(this.x * s, this.y * s)\n    }\n\n    dot(v: Vec2D): number {\n        return this.x*v.x + this.y*v.y\n    }\n}\n\nexport default Vec2D;","import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Canvas } from '../../util/Canvas';\nimport Vec2D from '../../util/Vector2D';\n\nclass Charge {\n    pos: Vec2D;\n    vel: Vec2D;\n    charge: number;\n    fixed: boolean;\n\n    constructor(pos: Vec2D, charge: number, fixed: boolean) {\n        this.charge = charge;\n        this.pos = pos;\n        this.vel = new Vec2D(0, 0);\n        this.fixed = fixed;\n    }\n\n    render(c: CanvasRenderingContext2D): void {\n        if (this.charge > 0) {\n            c.fillStyle=\"#EE3300\";\n            c.beginPath();\n            c.arc(this.pos.x,this.pos.y,3,0,2*Math.PI,false);\n            c.fill();\n\n            c.lineWidth = 1\n            c.strokeStyle = \"#FFFFFF\"\n            c.beginPath();\n            c.moveTo(this.pos.x-2, this.pos.y)\n            c.lineTo(this.pos.x+2, this.pos.y)\n            c.moveTo(this.pos.x, this.pos.y-2)\n            c.lineTo(this.pos.x, this.pos.y+2)\n            c.stroke();\n        }\n        else {\n            c.fillStyle=\"#0099EE\";\n            c.beginPath();\n            c.arc(this.pos.x,this.pos.y,3,0,2*Math.PI,false);\n            c.fill();\n\n            c.lineWidth = 1\n            c.strokeStyle = \"#FFFFFF\"\n            c.beginPath();\n            c.moveTo(this.pos.x-2, this.pos.y)\n            c.lineTo(this.pos.x+2, this.pos.y)\n            c.stroke();\n        }\n    }\n\n    calc_accel(other_charge: Charge): Vec2D {\n        //var k = 1\n        var k = 0.5\n        var r = other_charge.pos.sub(this.pos)\n        //-2 for inverse, -3 for inverse square\n        var accel =  - k * this.charge * other_charge.charge * r.len_n(-2)\n\n        return r.mul(accel);\n    }\n}\n\nlet charges: Charge[] = [];\nlet conductor_radius: number = 200;\n\nfunction draw(c: CanvasRenderingContext2D, width: number, height: number): void {\n    c.fillStyle = \"#222222\";\n    c.fillRect(0,0,width, height);\n\n    c.lineWidth = 2\n    c.strokeStyle = \"#DDDD00\"\n    c.beginPath();\n    c.arc(width*0.5, height*0.5, conductor_radius,0,2*Math.PI,false);\n    c.stroke();\n\n    let accels: Vec2D[] = []\n\n    // finds total acceleration on each charge\n    for (var i = 0; i < charges.length; i++) {\n        let accel = new Vec2D(0,0)\n        for (var j = 0; j < charges.length; j++) {\n            if (i !== j) {\n                accel = accel.add(charges[i].calc_accel(charges[j]))\n            }\n        }\n        accels.push(accel)\n    }\n\n    // iterates through each charge and applies kinematics\n    for (var i = 0; i < charges.length; i++) {\n        if (charges[i].fixed)\n            continue;\n\n        charges[i].vel = charges[i].vel.add(accels[i])\n        charges[i].pos = charges[i].pos.add(charges[i].vel)\n\n        var centervec = new Vec2D(width*0.5, height*0.5)\n        var r = charges[i].pos.sub(centervec)\n\n        // collision detection against the edge of conductor\n        if (r.len() > conductor_radius) {\n            // cancels out velocity in direction of normal vector of the container\n            // effectively results in electrons \"sliding\" against wall rather than getting stuck to it\n            var n_vel_vec = r.mul(charges[i].vel.dot(r) * r.len_n(-2))\n            charges[i].vel = charges[i].vel.sub(n_vel_vec.mul(1.9))\n            let conductor_vec = r.mul(conductor_radius / r.len())\n            charges[i].pos = centervec.add(conductor_vec)\n        }\n    }\n\n    charges.forEach(function(arrayItem) {\n        arrayItem.render(c);\n    });\n}\n\nfunction init(width: number, height: number): void {\n    charges = [\n        //new Charge(new Vec2D(400,200),1, false),\n        //new Charge(new Vec2D(300,300),-1, false),\n        new Charge(new Vec2D(600,130), -100, true)\n        //new Charge(new Vec2D(300,198),-1)\n    ];\n\n    for (var y = 0; y < height; y += 20) {\n        for (var x = 0; x < width; x += 20) {\n            if ((x-width/2) * (x-width/2) + (y-height/2)*(y-height/2) > conductor_radius*conductor_radius)\n                continue;\n            charges.push(new Charge(new Vec2D(x,y), 1, true))\n        }\n    }\n\n    for (var y = 10; y < height; y += 20) {\n        for (var x = 10; x < width; x += 20) {\n            if ((x-width/2) * (x-width/2) + (y-height/2)*(y-height/2) > conductor_radius*conductor_radius)\n                continue;\n            charges.push(new Charge(new Vec2D(x,y), -1, false))\n        }\n    }\n}\n\nexport const Conductors = () => {\n    useEffect(() => {\n        document.title = \"Conductors\";\n        init(640, 480);\n    });\n\n    return (\n        <div className=\"mainContent\">\n            <Link to=\"/\">Back to main page</Link>\n            <Canvas contextType='2d' renderFunc={draw} width={640} height={480} />\n            <script src=\"conductors.js\"></script>\n            <p>While learning electrostatics for AP physics, my book made the claim that in an electrically neutral conductor, the electric field inside is zero and there is only a net charge on the surface.</p>\n            <p>So, I decided to try to get some more intuition for this claim by simulating a conductor as seen above. The positive nuclei of atoms are fixed in place and their electrons are free to flow around.\n                 I simply use Coulomb's law to calculate the attraction between every charge, and even with this many charges, it works well enough on a website. I fixed a single negative charge in place outside \n                 of the conductor with one hundred times the magnitude of charge compared to the individual particles in the conductor.\n            </p>\n            <p>I did make a slight modification to Coulomb's law. Basically, it seems that the charge only settles on the surface in 3 dimensions because the electric force obeys an inverse-square relationship with distance.\n                 However, this is a 2 dimensional simulation, so to get the same behavior, an inverse-square law no longer works. Instead, I modified it to be only inverse.\n            </p>\n            <p>This is still somewhat low resolution as far as atoms and electrons in a conductor go, so the result doesn't seem to be very clearly visible. But still, it does seem to work pretty well just by looking at it \n               (which admittedly isn't a very rigorous metric). Some further changes I could make to pursue this further would be to rewrite it in C++ to get enough of a performance boost to allow a finer grid with more \n               nuclei and electrons to be simulated.\n            </p>\n        </div>\n    );\n}\n\nexport default Conductors;","import { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Canvas from '../../util/Canvas';\n\nimport './colorbuttonstyles.css';\n\nenum NodeType {\n    MIXED_TYPE = -1,\n    GREY,\n    BLUE,\n    GREEN,\n    BROWN,\n    RED\n}\n\ninterface BFSnode {\n    node: QuadtreeNode;\n    width: number;\n    height: number;\n    centerx: number;\n    centery: number;\n    depth: number;\n}\n\nlet typeColors = ['#999999', '#2288EE', '#5CCC00', '#9B7653', '#FF6600']\nlet selectedType = 0;\n\nclass Quadtree {\n    private root: QuadtreeNode;\n    private depthCap: number;\n    private centerx: number;\n    private centery: number;\n    private width: number;\n    private height: number;\n\n    private buffer: HTMLCanvasElement;\n    private bufferContext: CanvasRenderingContext2D;\n\n    constructor(depthCap: number, centerx: number, centery: number, width: number, height: number) {\n        this.root = new QuadtreeNode(0, depthCap);\n        this.depthCap = depthCap;\n        this.centerx = centerx;\n        this.centery = centery;\n        this.width = width;\n        this.height = height;\n\n        // this buffer is used for rendering the grid lines over the canvas with inverted colors\n        this.buffer = document.createElement(\"canvas\");\n        this.buffer.width = 512;\n        this.buffer.height = 512;\n        this.bufferContext = this.buffer.getContext('2d') as CanvasRenderingContext2D;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, drawGrid: boolean = true): void {\n        this.bufferContext.strokeStyle = '#FFFFFF';\n        this.bufferContext.clearRect(0, 0, 512, 512);\n        this.bufferContext.fillStyle = '#FFFFFF';\n        this.root.draw(ctx, this.bufferContext, this.centerx, this.centery, this.width, this.height);\n\n        if (drawGrid) {\n            ctx.globalCompositeOperation='difference';\n            ctx.drawImage(this.buffer, 0, 0);\n            ctx.globalCompositeOperation='source-over';\n        }\n    }\n\n    handleClick(type: NodeType, x: number, y: number, targetDepth: number) {\n        this.root.handleClick(type, x, y, targetDepth, 0, this.depthCap, this.centerx, this.centery, this.width, this.height);\n    }\n\n    drawHoverbox(ctx: CanvasRenderingContext2D, mousex: number, mousey: number, targetDepth: number) {\n        ctx.strokeStyle = '#FFFFFF';\n        //ctx.globalCompositeOperation='difference';\n        this.root.drawHoverbox(ctx, mousex, mousey, targetDepth, 0, this.depthCap, this.centerx, this.centery, this.width, this.height);\n        //ctx.globalCompositeOperation='source-over';\n    }\n\n    getNodeAt(cursorx: number, cursory: number, maxDepth: number = this.depthCap): undefined | BFSnode {\n        if (cursorx < 0 || cursory < 0 || cursorx > this.width || cursory > this.height) {\n            return undefined;\n        }\n        let current = this.root;\n        let centerx = this.centerx;\n        let centery = this.centery;\n        let width = this.width;\n        let height = this.height;\n        let depth = 0;\n        while (current.getType() === NodeType.MIXED_TYPE && depth < maxDepth) {\n            // top left\n            if (cursorx <= centerx && cursory <= centery) {\n                centerx -= width*0.25;\n                centery -= height*0.25;\n                current = current.getChild(0);\n            }\n            // bottom left\n            else if (cursorx <= centerx && cursory > centery) {\n                centerx -= width*0.25;\n                centery += height*0.25;\n                current = current.getChild(1);\n            }\n            // bottom right\n            else if (cursorx > centerx && cursory > centery) {\n                centerx += width*0.25;\n                centery += height*0.25;\n                current = current.getChild(2);\n            }\n            // top right\n            else {\n                centerx += width*0.25;\n                centery -= height*0.25;\n                current = current.getChild(3);\n            }\n            width *= 0.5;\n            height *= 0.5;\n            depth++;\n        }\n        return {node: current, width: width, height: height, centerx: centerx, centery: centery, depth: depth};\n    }\n\n    selectTest(cursorx: number, cursory: number) {\n        console.log(\"SELECT TEST\");\n        let current = this.getNodeAt(cursorx, cursory);\n        if (current === undefined) {\n            return;\n        }\n        console.log(\"not nll\");\n        /*\n        current.node.selected = true;\n\n        let topneighbors = current.node.getBottomNeighbors(this, current.width, current.height, current.centerx, current.centery, current.depth); topneighbors.forEach(e => {\n            e.node.selected = true;\n        });\n        topneighbors = current.node.getTopNeighbors(this, current.width, current.height, current.centerx, current.centery, current.depth); topneighbors.forEach(e => {\n            e.node.selected = true;\n        });\n        topneighbors = current.node.getRightNeighbors(this, current.width, current.height, current.centerx, current.centery, current.depth); topneighbors.forEach(e => {\n            e.node.selected = true;\n        });\n        */\n        let topneighbors = current.node.getLeftNeighbors(this, current.width, current.height, current.centerx, current.centery, current.depth); topneighbors.forEach(e => {\n            e.node.selected = true;\n        });\n       console.log(current.node.getLeftNeighbors(this, current.width, current.height, current.centerx, current.centery, current.depth));\n    }\n\n    // performs BFS to do a flood fill\n    floodFill(cursorx: number, cursory: number, fillColor: NodeType) {\n        let start = this.getNodeAt(cursorx, cursory);\n        if (start === undefined) {\n            return;\n        }\n\n        let startingColor = start.node.getType();\n        if (startingColor === fillColor) {\n            return;\n        }\n\n        let queue = [start];\n        while (queue.length > 0) {\n            let current = queue.shift();\n            if (current === undefined) {\n                continue;\n            }\n            current?.node.setType(fillColor, current.depth, this.depthCap);\n\n            let neighbors = current?.node.getTopNeighbors(this, current.width, current.height, current.centerx, current.centery, current.depth);\n            if (neighbors !== undefined) {\n                neighbors.forEach(e => {\n                    if (e.node.getType() === startingColor && !queue.includes(e)) {\n                        queue.push(e);\n                    }\n                });\n            }\n\n            neighbors = current?.node.getBottomNeighbors(this, current.width, current.height, current.centerx, current.centery, current.depth);\n            if (neighbors !== undefined) {\n                neighbors.forEach(e => {\n                    if (e.node.getType() === startingColor && !queue.includes(e)) {\n                        queue.push(e);\n                    }\n                });\n            }\n\n            neighbors = current?.node.getLeftNeighbors(this, current.width, current.height, current.centerx, current.centery, current.depth);\n            if (neighbors !== undefined) {\n                neighbors.forEach(e => {\n                    if (e.node.getType() === startingColor && !queue.includes(e)) {\n                        queue.push(e);\n                    }\n                });\n            }\n\n            neighbors = current?.node.getRightNeighbors(this, current.width, current.height, current.centerx, current.centery, current.depth);\n            if (neighbors !== undefined) {\n                neighbors.forEach(e => {\n                    if (e.node.getType() === startingColor && !queue.includes(e)) {\n                        queue.push(e);\n                    }\n                });\n            }\n        }\n        this.root.consolidate(0, this.depthCap);\n    }\n}\n\nclass QuadtreeNode {\n    // 0: top left\n    // 1: bottom left\n    // 2: bottom right\n    // 3: top right\n    private children: QuadtreeNode[];\n    public type: NodeType;\n    public selected: boolean = false;\n\n    constructor(depth: number, depthCap: number) {\n        this.type = 1; // hardcodes default as the \"sky\" looking color\n        this.children = [];\n\n        // if the node is not a leaf, add four children\n        if (depth < depthCap) {\n            for (let i = 0; i < 4; i++) {\n                this.children.push(new QuadtreeNode(depth + 1, depthCap));\n            }\n        }\n    }\n\n    getType() {\n        return this.type;\n    }\n\n    getChild(index: number) {\n        return this.children[index];\n    }\n\n    consolidate(depth: number, depthCap: number) {\n        if (depth === depthCap || this.type !== NodeType.MIXED_TYPE) {\n            return;\n        }\n\n        if (this.children[0].type !== NodeType.MIXED_TYPE && this.children[0].type === this.children[1].type && this.children[1].type === this.children[2].type && this.children[2].type === this.children[3].type) {\n            this.setType(this.children[0].type, depth, depthCap);\n        }\n        else {\n            this.type = NodeType.MIXED_TYPE;\n            this.children[0].consolidate(depth + 1, depthCap);\n            this.children[1].consolidate(depth + 1, depthCap);\n            this.children[2].consolidate(depth + 1, depthCap);\n            this.children[3].consolidate(depth + 1, depthCap);\n            if (this.children[0].type !== NodeType.MIXED_TYPE && this.children[0].type === this.children[1].type && this.children[1].type === this.children[2].type && this.children[2].type === this.children[3].type) {\n                this.setType(this.children[0].type, depth, depthCap);\n            }\n        }\n    }\n\n    getTopChildren(width: number, height: number, centerx: number, centery: number, depth: number): BFSnode[] {\n        if (this.type !== NodeType.MIXED_TYPE) {\n            return [{node: this, width: width, height: height, centerx: centerx, centery: centery, depth: depth}];\n        }\n\n        let nodeList: BFSnode[] = [];\n        nodeList.push(...this.children[0].getTopChildren(width*0.5, height*0.5, centerx - width*0.25, centery - height*0.25, depth + 1));\n        nodeList.push(...this.children[3].getTopChildren(width*0.5, height*0.5, centerx + width*0.25, centery - height*0.25, depth + 1));\n        return nodeList;\n    }\n\n    getBottomChildren(width: number, height: number, centerx: number, centery: number, depth: number): BFSnode[] {\n        if (this.type !== NodeType.MIXED_TYPE) {\n            return [{node: this, width: width, height: height, centerx: centerx, centery: centery, depth: depth}];\n        }\n\n        let nodeList: BFSnode[] = [];\n        nodeList.push(...this.children[1].getBottomChildren(width*0.5, height*0.5, centerx - width*0.25, centery + height*0.25, depth + 1));\n        nodeList.push(...this.children[2].getBottomChildren(width*0.5, height*0.5, centerx + width*0.25, centery + height*0.25, depth + 1));\n        return nodeList;\n    }\n\n    getLeftChildren(width: number, height: number, centerx: number, centery: number, depth: number): BFSnode[] {\n        if (this.type !== NodeType.MIXED_TYPE) {\n            return [{node: this, width: width, height: height, centerx: centerx, centery: centery, depth: depth}];\n        }\n\n        let nodeList: BFSnode[] = [];\n        nodeList.push(...this.children[0].getLeftChildren(width*0.5, height*0.5, centerx - width*0.25, centery - height*0.25, depth + 1));\n        nodeList.push(...this.children[1].getLeftChildren(width*0.5, height*0.5, centerx - width*0.25, centery + height*0.25, depth + 1));\n        return nodeList;\n    }\n\n    getRightChildren(width: number, height: number, centerx: number, centery: number, depth: number): BFSnode[] {\n        if (this.type !== NodeType.MIXED_TYPE) {\n            return [{node: this, width: width, height: height, centerx: centerx, centery: centery, depth: depth}];\n        }\n\n        let nodeList: BFSnode[] = [];\n        nodeList.push(...this.children[3].getRightChildren(width*0.5, height*0.5, centerx + width*0.25, centery - height*0.25, depth + 1));\n        nodeList.push(...this.children[2].getRightChildren(width*0.5, height*0.5, centerx + width*0.25, centery + height*0.25, depth + 1));\n        return nodeList;\n    }\n\n    getTopNeighbors(tree: Quadtree, width: number, height: number, centerx: number, centery: number, depth: number) {\n        let node = tree.getNodeAt(centerx, centery - height, depth);\n        if (node === undefined) {\n            return [];\n        }\n        if (node.node.type !== NodeType.MIXED_TYPE) {\n            return [node];\n        }\n        return node.node.getBottomChildren(width, height, centerx, centery - height, depth);\n    }\n\n    getBottomNeighbors(tree: Quadtree, width: number, height: number, centerx: number, centery: number, depth: number) {\n        let node = tree.getNodeAt(centerx, centery + height, depth);\n        if (node === undefined) {\n            return [];\n        }\n        if (node.node.type !== NodeType.MIXED_TYPE) {\n            return [node];\n        }\n        return node.node.getTopChildren(width, height, centerx, centery + height, depth);\n    }\n\n    getLeftNeighbors(tree: Quadtree, width: number, height: number, centerx: number, centery: number, depth: number) {\n        let node = tree.getNodeAt(centerx - width, centery, depth);\n        if (node === undefined) {\n            return [];\n        }\n        if (node.node.type !== NodeType.MIXED_TYPE) {\n            return [node];\n        }\n        return node.node.getRightChildren(width, height, centerx - width, centery, depth);\n    }\n\n    getRightNeighbors(tree: Quadtree, width: number, height: number, centerx: number, centery: number, depth: number) {\n        let node = tree.getNodeAt(centerx + width, centery, depth);\n        if (node === undefined) {\n            return [];\n        }\n        return node.node.getLeftChildren(width, height, centerx + width, centery, depth);\n    }\n\n    setType(type: NodeType, depth: number, depthCap: number) {\n        if (depth < depthCap) {\n            for (let i = 0; i < 4; i++) {\n                this.children[i].setType(type, depth + 1, depthCap);\n            }\n        }\n        this.type = type;\n    }\n\n    handleClick(type: NodeType, x: number, y: number, targetDepth: number, depth: number, depthCap: number, centerx: number, centery: number, width: number, height: number) {\n        if (type === this.type) {\n            return;\n        }\n\n        if (depth === targetDepth) {\n            this.setType(type, depth, depthCap);\n            return;\n        }\n\n        if (x <= centerx && y <= centery && this.children[0].type !== type) {\n            this.children[0].handleClick(type, x, y, targetDepth, depth + 1, depthCap, centerx - width*0.25, centery - height*0.25, width*0.5, height*0.5);\n        }\n        else if (x <= centerx && y > centery && this.children[1].type !== type) {\n            this.children[1].handleClick(type, x, y, targetDepth, depth + 1, depthCap, centerx - width*0.25, centery + height*0.25, width*0.5, height*0.5);\n        }\n        else if (x > centerx && y > centery && this.children[2].type !== type) {\n            this.children[2].handleClick(type, x, y, targetDepth, depth + 1, depthCap, centerx + width*0.25, centery + height*0.25, width*0.5, height*0.5);\n        }\n        else if (x > centerx && y <= centery && this.children[3].type !== type) {\n            this.children[3].handleClick(type, x, y, targetDepth, depth + 1, depthCap, centerx + width*0.25, centery - height*0.25, width*0.5, height*0.5);\n        }\n\n        // consolidates types\n        if (this.children[0].type === this.children[1].type && this.children[1].type === this.children[2].type && this.children[2].type === this.children[3].type)\n            this.type = this.children[0].type;\n        else\n            this.type = NodeType.MIXED_TYPE;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, bctx: CanvasRenderingContext2D, centerx: number, centery: number, width: number, height: number) {\n        if (this.type === NodeType.MIXED_TYPE) {\n            this.children[0].draw(ctx, bctx, centerx - width*0.25, centery - height*0.25, width*0.5, height*0.5);\n            this.children[1].draw(ctx, bctx, centerx - width*0.25, centery + height*0.25, width*0.5, height*0.5);\n            this.children[2].draw(ctx, bctx, centerx + width*0.25, centery + height*0.25, width*0.5, height*0.5);\n            this.children[3].draw(ctx, bctx, centerx + width*0.25, centery - height*0.25, width*0.5, height*0.5);\n\n            // the lines draw faintly the first time, and the easiest way to make them more well defined is to just draw them more times\n            // it is somewhat clunky but it works well\n\n            for (let i = 0; i < 2; i++) {\n                bctx.beginPath();\n                bctx.moveTo(centerx - width*0.5, centery - height*0.5);\n                bctx.lineTo(centerx - width*0.5, centery + height*0.5);\n                bctx.lineTo(centerx + width*0.5, centery + height*0.5);\n                bctx.lineTo(centerx + width*0.5, centery - height*0.5);\n                bctx.lineTo(centerx - width*0.5, centery - height*0.5);\n                bctx.stroke();\n\n                bctx.beginPath();\n                bctx.moveTo(centerx - width*0.5, centery);\n                bctx.lineTo(centerx + width*0.5, centery);\n                bctx.stroke();\n\n                bctx.beginPath();\n                bctx.moveTo(centerx, centery - height*0.5);\n                bctx.lineTo(centerx, centery + height*0.5);\n                bctx.stroke();\n            }\n        }\n        else {\n            ctx.fillStyle = typeColors[this.type];\n            if (this.selected) {\n                ctx.fillStyle = '#FF00FF';\n            }\n            ctx.fillRect((centerx - width*0.5), (centery - height*0.5), width, height);\n        }\n    }\n\n    drawHoverbox(ctx: CanvasRenderingContext2D, x: number, y: number, targetDepth: number, depth: number, depthCap: number, centerx: number, centery: number, width: number, height: number) {\n        if (depth === targetDepth || depth === depthCap) {\n            ctx.beginPath();\n            ctx.moveTo(centerx - width*0.5, centery - height*0.5);\n            ctx.lineTo(centerx - width*0.5, centery + height*0.5);\n            ctx.lineTo(centerx + width*0.5, centery + height*0.5);\n            ctx.lineTo(centerx + width*0.5, centery - height*0.5);\n            ctx.lineTo(centerx - width*0.5, centery - height*0.5);\n            ctx.stroke();\n        }\n        else {\n            if (x <= centerx && y <= centery) {\n                this.children[0].drawHoverbox(ctx, x, y, targetDepth, depth + 1, depthCap, centerx - width*0.25, centery - height*0.25, width*0.5, height*0.5);\n            }\n            else if (x <= centerx && y > centery) {\n                this.children[1].drawHoverbox(ctx, x, y, targetDepth, depth + 1, depthCap, centerx - width*0.25, centery + height*0.25, width*0.5, height*0.5);\n            }\n            else if (x > centerx && y > centery) {\n                this.children[2].drawHoverbox(ctx, x, y, targetDepth, depth + 1, depthCap, centerx + width*0.25, centery + height*0.25, width*0.5, height*0.5);\n            }\n            else if (x > centerx && y <= centery) {\n                this.children[3].drawHoverbox(ctx, x, y, targetDepth, depth + 1, depthCap, centerx + width*0.25, centery - height*0.25, width*0.5, height*0.5);\n            }\n        }\n    }\n}\n\nexport const Quadtrees = () => {\n    let quadtree: Quadtree;\n    let dragging: boolean = false;\n    let brushSize: number = 6;\n    const MAX_BRUSH_SIZE: number = 6;\n    let mousex = 0.0;\n    let mousey = 0.0;\n    let drawGrid = true;\n\n    useEffect(() => {\n        // in this arrangement, the quadtree apparently gets reset after each time react renders, but react never needs to render again so this works for now\n        quadtree = new Quadtree(MAX_BRUSH_SIZE, 256, 256, 512, 512);\n    });\n\n    function handleCheckboxChange(e: React.ChangeEvent<HTMLInputElement>) {\n        drawGrid = e.target.checked;\n    }\n\n    function draw(ctx: CanvasRenderingContext2D) {\n        if (quadtree === undefined) {\n            console.log(\"Quadtree is undefined!!\");\n            return;\n        }\n\n        ctx.lineWidth = 2;\n        quadtree.draw(ctx, drawGrid);\n        quadtree.drawHoverbox(ctx, mousex, mousey, brushSize);\n    }\n\n    let colorButtons = []\n    colorButtons.push(<span><input onClick={() => selectedType=0} type=\"radio\" id={\"radio0\"} name=\"radios\" value={0} /><label style={{ backgroundColor: typeColors[0] }} htmlFor={\"radio0\"}></label></span>)\n    for (let i = 1; i < typeColors.length; i++) {\n        let id: string = \"radio\" + i;\n        colorButtons.push(<span><input onClick={() => selectedType=i} type=\"radio\" id={id} name=\"radios\" value={i} /><label style={{ backgroundColor: typeColors[i] }} htmlFor={id}></label></span>)\n    }\n    return (\n        <div className=\"mainContent\">\n            <Link to=\"/\">Back to main page</Link>\n            <Canvas contextType='2d' renderFunc={draw} width={512} height={512}\n                mouseDown = {(e: MouseEvent) => {\n                    quadtree.handleClick(selectedType, e.offsetX, e.offsetY, brushSize);\n                    dragging = true;\n                }}\n\n                mouseMove = {(e: MouseEvent) => {\n                    mousex = e.offsetX;\n                    mousey = e.offsetY;\n\n                    if (dragging) {\n                        quadtree.handleClick(selectedType, e.offsetX, e.offsetY, brushSize);\n                    }\n                }}\n\n                mouseUp = {(e: MouseEvent) => {\n                    dragging = false;\n                }}\n\n                mouseWheel = {(e: WheelEvent) => {\n                    if (e.deltaY > 0) {\n                        brushSize++;\n                    }\n                    else if (e.deltaY < 0) {\n                        brushSize--;\n                    }\n\n                    if (brushSize > MAX_BRUSH_SIZE) {\n                        brushSize = MAX_BRUSH_SIZE;\n                    } else if (brushSize < 0) {\n                        brushSize = 0;\n                    }\n                }}\n\n                mouseOut = {(e: MouseEvent) => {\n                    dragging = false;\n                }}\n\n                keyDown = {(e: KeyboardEvent) => {\n                    switch (e.key) {\n                        case 'i':\n                            brushSize++;\n                            if (brushSize > MAX_BRUSH_SIZE) {\n                                brushSize = MAX_BRUSH_SIZE;\n                            }\n                            break;\n                        case 'o':\n                            brushSize--;\n                            if (brushSize < 0) {\n                                brushSize = 0;\n                            }\n                            break;\n                        case 'f':\n                            quadtree.floodFill(mousex, mousey, selectedType);\n                            break;\n                        //case 's':\n                            //quadtree.selectTest(mousex, mousey);\n                            //break;\n                    }\n                }}\n            />\n            <div className=\"colorButtonDiv\"> {colorButtons} </div>\n            <input onChange={handleCheckboxChange.bind(this)} defaultChecked={true} type=\"checkbox\" id=\"gridRenderCheckbox\"/>\n            <label htmlFor=\"gridRenderCheckbox\">Render grid</label>\n            <p>Select a color to draw with by clicking on its square above. Then simply click and drag to draw. Press 'f' to perform a floodfill at the location of the mouse cursor with the selected color. Press 'o' to make the brush larger and 'i' to make it smaller.</p>\n            <p>Recently, I've been obsessed with making a voxel game similar to Minecraft. One thing I've read is how commonly octrees are used for this purpose. Before I try making anything with octrees, \n                I wanted to see if I could even use quadtrees, the more mild 2-dimensional cousins of octrees.</p>\n            <p>The canvas above is sort of like a picture in MS Paint that you can draw on, but it also visualizes the quadtree structure. For the most part, this wasn't too hard to implement, \n                but getting the flood fill to work properly was somewhat of a challenge.</p>\n        </div>\n    );\n}\n\nexport default Quadtrees;","export default __webpack_public_path__ + \"static/media/stockphotosign.70f0bb49.jpg\";","export default __webpack_public_path__ + \"static/media/step1.300747a7.png\";","export default __webpack_public_path__ + \"static/media/step2.c6fa55de.png\";","export default __webpack_public_path__ + \"static/media/step3.87f35fe5.png\";","export default __webpack_public_path__ + \"static/media/step4.40941011.png\";","export default __webpack_public_path__ + \"static/media/finalresult.96c51cc9.png\";","export default __webpack_public_path__ + \"static/media/bobross.52ce9a7f.jpg\";","import React, { CSSProperties, useEffect, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Tex2SVG from 'react-hook-mathjax'\n\nimport Canvas from '../../util/Canvas';\n\nimport './mspaintstyles.css';\n\nimport stockphotosign from './stockphotosign.jpg';\nimport step1 from './step1.png';\nimport step2 from './step2.png';\nimport step3 from './step3.png';\nimport step4 from './step4.png';\nimport finalresult from './finalresult.png';\nimport bobrossimg from './bobross.jpg';\n\nexport const MsPaintMatrix = () => {\n    const original_width_field_ref = useRef<HTMLInputElement>(null);\n    const original_height_field_ref = useRef<HTMLInputElement>(null);\n    const angle_field_ref = useRef<HTMLInputElement>(null);\n    const second_angle_field_ref = useRef<HTMLInputElement>(null);\n    const slider_ref = useRef<HTMLInputElement>(null);\n\n    const [calcWidthText, setCalcWidthText] = useState<string>('The new width is: ');\n    const [calcHeightText, setCalcHeightText] = useState<string>('The new height is: ');\n\n    const bobross_ref = useRef<HTMLImageElement>(null);\n\n    let smallimgstyle: CSSProperties = {\n        width: '30%'\n    };\n\n    let medimgstyle: CSSProperties = {\n        width: '60%'\n    };\n\n    let centerstyle: CSSProperties = {\n        textAlign: 'center'\n    };\n\n    let invis: CSSProperties = {\n        display: 'none'\n    }\n\n    function onTextFieldChange(): void {\n        let widthfield: number = parseInt(original_width_field_ref.current!.value);\n        let heightfield: number = parseInt(original_height_field_ref.current!.value);\n        let anglefield: number = parseInt(angle_field_ref.current!.value);\n\n        setCalcWidthText(\"The new width is: \"+Math.round(widthfield*Math.cos(anglefield*Math.PI/180)));\n        setCalcHeightText(\"The new height is: \"+Math.round(heightfield/Math.cos(anglefield*Math.PI/180)));\n    }\n\n    useEffect(() => {\n        document.title = \"Matrix!\";\n        onTextFieldChange();\n    });\n\n    function lerp(a: number, b: number, t: number): number {\n        return (1-t) * a + t * b;\n    }\n\n    function draw(c: CanvasRenderingContext2D, width: number, height: number) {\n        if (slider_ref.current == null) {\n            return;\n        }\n\n        c.setTransform(1, 0, 0, 1, 0, 0)\n        c.clearRect(0,0,640,480)\n        //c.setTransform(1, -slider.value * 0.001, 0, -1, 320, 240)\n        c.setTransform(1, 0, 0, 1, 320, 240)\n\n        let scalar: number;\n        let slidervalue: number = parseInt(slider_ref.current!.value);\n\n        // angle value is capped, converted to radians, and flipped to account for flipped y-axis on HTML5 canvas\n        let angle: number = parseInt(second_angle_field_ref.current!.value);\n        if (angle <= -180) {\n            angle = Math.PI;\n        }\n        else if (angle >= 180) {\n            angle = -Math.PI;\n        }\n        else {\n            angle = -angle * Math.PI / 180.0\n        }\n\n        if (slidervalue <= 333) {\n            scalar = slidervalue / 333.0;\n            c.transform(1,lerp(0,Math.tan(angle), scalar),0, 1, 0, 0)\n        }\n        else if (slidervalue <= 666) {\n            scalar = (slidervalue - 333) / 333.0\n            c.transform(1,Math.tan(angle), 0, 1, 0, 0)\n            c.transform(lerp(1,Math.cos(angle),scalar),0,0,lerp(1,1/Math.cos(angle),scalar),0,0)\n        }\n        else {\n            scalar = (slidervalue - 666) / 333.0\n            c.transform(1,Math.tan(angle), 0, 1, 0, 0)\n            c.transform(Math.cos(angle),0,0,1/Math.cos(angle),0,0)\n            c.transform(1, 0, lerp(0, -Math.tan(angle), scalar),  1, 0, 0)\n        }\n\n        //c.setTransform(Math.cos(getAngle()), Math.sin(getAngle()), -Math.sin(getAngle()), Math.cos(getAngle()), 0, 0)\n        c.fillStyle = \"#000000\"\n        //c.fillRect(-50,-50,100,100)\n        c.drawImage(bobross_ref.current!, -100, -100, 200, 200)\n    }\n\n    return (\n        <div className=\"mainContent\">\n            <Link to=\"/\">Back to main page</Link>\n            <h1>Actually rotating text in MS Paint</h1>\n            <p>The classic meme is that it is impossible to rotate text in Microsoft Paint. Outside of flipping and 90 degree rotations, this seems to be true. However, here I will prove that statement wrong using math.</p>\n            <h2>How to do it (explanation why is further down)</h2>\n            <p>Let's start by trying to add rotated text to this guy's stock photo sign below. I'm going to guess that we need to rotate it about 25 degrees clockwise. The plan is to rotate the whole image, place the text with no rotation, and rotate it back.</p>\n            <img className=\"step\" style={smallimgstyle} src={stockphotosign} />\n            <p>First, do a horizontal skew on the image by the ultimate amount you want to rotate. 25 degrees in this case.</p>\n            <img className=\"step\" style={medimgstyle} src={step1} />\n            <p>Now this step is slightly more complicated. Set the width to the original width of the image multiplied by the cosine of the angle. Set the height to the original height <i>divided</i> by the cosine of the angle.\n             This step is really only to scale the width by the cosine and height by the secant of the angle. The reason we don't scale by percent is that Microsoft Paint only lets you scale by integer percents so precision is lost.\n             Since this can be confusing, I've included a small helper below to calculate the new width and height of an image.</p>\n            <p>Original width: <input defaultValue={1000} onChange={onTextFieldChange} ref={original_width_field_ref} type=\"number\" id=\"widthfield\" min=\"0\" max=\"10000\" /></p>\n            <p>Original height: <input defaultValue={600} onChange={onTextFieldChange} ref={original_height_field_ref} type=\"number\" id=\"heightfield\" min=\"0\" max=\"10000\" /></p>\n            <p>Angle: <input defaultValue={0} onChange={onTextFieldChange} ref={angle_field_ref} type=\"number\" id=\"anglefield\" min=\"-89\" max=\"89\" /></p>\n            <br />\n            <p>{calcWidthText}</p>\n            <p>{calcHeightText}</p>\n            <img className=\"step\" style={medimgstyle} src={step2}></img>\n            <p>This final step is easier than before. Just do a vertical scale by the <i>negative</i> angle of rotation.</p>\n            <img className=\"step\" style={medimgstyle} src={step3}></img>\n            <p>Now put the text on:</p>\n            <img className=\"step\" style={smallimgstyle} src={step4}></img>\n            <p>And repeat these instructions but in reverse to get the final result:</p>\n            <img className=\"step\" style={smallimgstyle} src={finalresult}></img>\n            <p>Now for a few caveats. If your image is too large or too far from being a square, Microsoft Paint sometimes splices the image in a bizarre way when performing skews. Either resize or crop the image back to a smaller size or more square aspect ratio.\n                 Also, when rotating by an angle close to 90, such as 85 degrees, the extreme skewing will tend to lead to poor results. If you wish to rotate by such an angle, use the built-in feature to rotate first by 90 degrees and then rotate -5 degrees with this process.\n            </p>\n            <h2>Why it works</h2>\n            <p>Since matrices can also represent linear transformations, rotations can be written in terms of matrix multiplication. While a rotation cannot be represented in Microsoft Paint,\n                 the program does have support for shearing and scaling. So, if a rotation matrix can be broken down into a bunch of shears and scales, then in theory MS Paint would be able to support rotating text.\n            </p>\n            <p>Here is how a rotation can be represented as a matrix:</p>\n            <Tex2SVG latex=\"\\begin{bmatrix} \\cos\\theta & -\\sin\\theta \\\\ \\sin\\theta & \\cos\\theta \\end{bmatrix}\" />\n            <p>In terms of linear transformations, the unit vector in the x direction gets mapped to the first column and the unit vector in the y direction gets mapped to the second column. \n                If that doesn't mean much to you, then try watching <a href=\"https://www.youtube.com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab\">the first three videos of 3blue1brown's essence of linear algebra series on YouTube.</a>\n                 If I tried to explain how matrices are linear transformations, this would turn into a bad copy of his videos.\n            </p>\n            <p>Now to try decomposing the rotation into a multiplication of triangular matrices. Since this matrix is only 2x2, it's a relatively straightforward process. \n                To the second row, add the first row multiplied by $-\\tan\\theta$ to eliminate the number in the lower left corner:</p>\n            <Tex2SVG latex=\"\\begin{bmatrix} 1 & 0 \\\\ -\\tan\\theta & 1 \\end{bmatrix}\\begin{bmatrix} \\cos\\theta & -\\sin\\theta \\\\ \\sin\\theta & \\cos\\theta \\end{bmatrix} = \\begin{bmatrix} 1\\cdot\\cos\\theta + 0\\cdot\\sin\\theta & 1\\cdot(-\\sin\\theta) + 0\\cdot\\cos\\theta \\\\ -\\tan\\theta\\cdot\\cos\\theta + 1\\cdot\\sin\\theta & (-\\tan\\theta)\\cdot(-\\sin\\theta) + 1\\cdot\\cos\\theta \\end{bmatrix}\" />\n            <Tex2SVG latex=\" = \\begin{bmatrix} \\cos\\theta & -\\sin\\theta \\\\ 0 & \\sec\\theta \\end{bmatrix}\" />\n            <p>And the matrix is factored. It can be written as follows:</p>\n            <Tex2SVG latex=\"\\begin{bmatrix} \\cos\\theta & -\\sin\\theta \\\\ \\sin\\theta & \\cos\\theta \\end{bmatrix}= \\begin{bmatrix} 1 & 0 \\\\ \\tan\\theta & 1 \\end{bmatrix}\\begin{bmatrix} \\cos\\theta & -\\sin\\theta \\\\ 0 & \\sec\\theta \\end{bmatrix}\" />\n            <p>However, MS Paint can only do shearing and scaling, so we have to break up the right-hand matrix. But this is only as hard as factoring out a diagonal matrix from it.</p>\n            <Tex2SVG latex=\"\\begin{bmatrix} \\cos\\theta & -\\sin\\theta \\\\ \\sin\\theta & \\cos\\theta \\end{bmatrix}= \\begin{bmatrix} 1 & 0 \\\\ \\tan\\theta & 1 \\end{bmatrix}\\begin{bmatrix} \\cos\\theta & 0 \\\\ 0 & \\sec\\theta \\end{bmatrix}\\begin{bmatrix}1 & -\\tan\\theta \\\\ 0 & 1\\end{bmatrix}\" />\n            <p>The matrices with tangents in them happen to be the exact same transformation that MS Paint does when it performs a skew by a certain angle.\n                 So, reading the matrices right to left, to rotate an image, first perform a horizontal skew by the negative angle, then scale the x and y by the cosine and secant of the angle,\n                  and then perform vertical skew by the desired angle.\n            </p>\n            <p>This small program below demonstrates what exactly is going on with the math. Drag the slider to visualize each step of the transformation.</p>\n            <Canvas contextType='2d' renderFunc={draw} width={640} height={480} />\n            <input ref={slider_ref} type=\"range\" min=\"0\" defaultValue=\"0\" max=\"999\" step=\"1\" className=\"slider\" id=\"range1\" />\n            <p style={centerstyle}>Angle: <input ref={second_angle_field_ref} type=\"number\" defaultValue=\"30\" min=\"-180\" max=\"180\" id=\"angle1\" /></p>\n            <img style={invis} src={bobrossimg} ref={bobross_ref}/>\n        </div>\n    );\n}\n\nexport default MsPaintMatrix;","export default __webpack_public_path__ + \"static/media/trenchpicoriginal.fb8b798d.jpg\";","export default __webpack_public_path__ + \"static/media/try1.2d9ca401.jpg\";","export default __webpack_public_path__ + \"static/media/try2.edf7ed4c.jpg\";","export default __webpack_public_path__ + \"static/media/try3.20852a5f.jpg\";","export default __webpack_public_path__ + \"static/media/try5_a.b20c52dc.jpg\";","export default __webpack_public_path__ + \"static/media/hereitis_secondposter.e59c57f3.jpg\";","import { Link } from 'react-router-dom';\n\nimport './photomosaicstyles.css';\n\nimport trenchpicoriginal from './trenchpicoriginal.jpg';\nimport try1 from './otherphotomosaictries/try1.jpg';\nimport try2 from './otherphotomosaictries/try2.jpg';\nimport try3 from './otherphotomosaictries/try3.jpg';\nimport try5_a from './otherphotomosaictries/try5_a.jpg';\n\nimport secondposter from './otherphotomosaictries/hereitis_secondposter.jpg';\n\nexport const PhotoMosaic = () => {\n    return(\n        <div className=\"mainContent\">\n            <Link to=\"/\">Back to main page</Link>\n            <h2>Photomosiac generator</h2>\n            <p>In my U.S. History class, we were assigned to create a photomosaic relating to World War 1. For anyone who doesn't know what it is, it's basically\n                a larger image made up of smaller ones, like the one in the thumbnail for this page.</p>\n            <p>Anyways, I decided to have a little fun with this and make the computer \n                do it for me on a scale much bigger than I could ever hope to do. I started with the base image below:\n            </p>\n            <img className=\"mosaicimg\" src={trenchpicoriginal} />\n            <p>Now I needed a quick way to download the first few hundred search results for World War 1 on Google. For this, I used <a href=\"https://github.com/hardikvasa/google-images-download\">this python library</a>\n                  to get the first few hundred images that pop up. The program ran out of images after it downloaded roughly 900 of them.</p>\n            <p>Then I sliced the base image into rectangular regions with a total of 32 across and 25 down. These subsections were sorted from lowest to highest average brightness.\n                The downloaded images were sorted in a similar fashion. The algorithm that follows is nothing complicated: each downloaded image was then matched with a subsection of similar brightness index.\n                This is the result:\n            </p>\n            <img className=\"mosaicimg\" src={try1} />\n            <p>It seems to work, but not well enough. My theory is that the distribution of brightnesses in the downloaded images is too far from that of the base image subsections.\n                In an attempt to account for this, I adjusted the brightness of each downloaded image to better match the base image. This produces a more well-defined result.\n            </p>\n            <img className=\"mosaicimg\" src={try2} />\n            <p>However, the original image still doesn't come through clearly enough. So, I blended it with the original image just a bit:</p>\n            <img className=\"mosaicimg\" src={try3} />\n            <p>One final idea I had was to duplicate each downloaded image 10 times so that we can have an even more well-defined photomosaic.\n                This has the unfortunate effect of causing the same images to cluster around each other because they have similar brightness.\n                But the final result is good enough that I think it's worth it.\n            </p>\n            <img className=\"mosaicimg\" src={try5_a} />\n            <p>We were also required to make a second photomosaic. My program can't sort with colors, so I just blended the colored base image more aggressively and still got this good result:</p>\n            <img className=\"mosaicimg\" src={secondposter} />\n            <p>One final note: If it seems difficult to distinguish individual subimages in the pictures above, it's because they are stored at a decreased resolution so the webpage loads more quickly.\n            </p>\n        </div>\n    );\n};\n\nexport default PhotoMosaic;","import { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Canvas from '../../util/Canvas';\n\nexport const MandelBrot = () => {\n    const vsSource = `\n        attribute vec2 aVertexPos;\n\n        //bounds for camera in the order: left, right, up, down\n        uniform vec4 cameraInfo;\n\n        varying vec2 p;\n\n        void main()\n        {\n            gl_Position = vec4(aVertexPos, 0.0, 1.0);\n            \n            vec2 temp = 0.5*(aVertexPos + vec2(1.0, 1.0));\n\n            // I really did just brute force it with advanced AI right here\n            if (aVertexPos == vec2(-1.0, -1.0))\n                p = cameraInfo.xw;\n            else if (aVertexPos == vec2(-1.0, 1.0))\n                p = cameraInfo.xz;\n            else if (aVertexPos == vec2(1.0, 1.0))\n                p = cameraInfo.yz;\n            else\n                p = cameraInfo.yw;\n        }\n    `;\n\n    const fsSource = `\n        precision highp float;\n\n        varying vec2 p;\n        const int max_iterations = 1024;\n\n        void main()\n        {\n            float znr = 0.0;\n            float zni = 0.0;\n            \n            int bounded_iterations = 0;\n            for (int i = 0; i < max_iterations; i++)\n            {\n                // once bounded_iterations is set, it is no longer changed\n                if (znr*znr + zni*zni >= 4.0 && bounded_iterations == 0)\n                {\n                    bounded_iterations = i+1;\n                }\n\n                float znnr = znr*znr - zni*zni + p.x;\n                float znni = 2.0*znr*zni + p.y;\n\n                znr = znnr;\n                zni = znni;\n            }\n\n            if (znr*znr + zni*zni < 4.0)\n            {\n                bounded_iterations = max_iterations;\n                gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n            }\n            else\n            {\n                float r = 0.5 * sin(3.0 * log(float(bounded_iterations)) + 0.0) + 0.5;\n                float g = 0.5 * sin(2.1 * log(float(bounded_iterations)) - 1.2) + 0.5;\n                float b = 0.5 * sin(4.6 * log(float(bounded_iterations)) + 0.6) + 0.5;\n                gl_FragColor = vec4(r, g, b, 1.0);\n            }\n            //gl_FragColor = vec4(vec3(float(bounded_iterations)/float(max_iterations)), 1.0);\n        }\n    `;\n\n    const CANVAS_WIDTH: number = 960;\n    const CANVAS_HEIGHT: number = 640;\n\n    let left = -CANVAS_WIDTH / CANVAS_HEIGHT;\n    let right = CANVAS_WIDTH / CANVAS_HEIGHT;\n    let up = 1.0;\n    let down = -1.0;\n\n    let dragging = false;\n    let lastx = 0;\n    let lasty = 0;\n\n    function translate(deltax: number, deltay: number): void\n    {\n        let camWidth = right - left;\n        let camHeight = up - down;\n        left -= (deltax / CANVAS_WIDTH) * camWidth;\n        right -= (deltax / CANVAS_WIDTH) * camWidth;\n        up += (deltay / CANVAS_HEIGHT) * camHeight;\n        down += (deltay / CANVAS_HEIGHT) * camHeight;\n    }\n\n    function zoom(magnify: boolean): void\n    {\n        let camWidth = right - left;\n        let camHeight = up - down;\n        if (magnify)\n        {\n            left += (lastx / CANVAS_WIDTH) * camWidth * 0.1;\n            right -= (1.0 - lastx / CANVAS_WIDTH) * camWidth * 0.1;\n            up -= (lasty / CANVAS_HEIGHT) * camHeight * 0.1;\n            down += (1.0 - lasty / CANVAS_HEIGHT) * camHeight * 0.1;\n        }\n        else\n        {\n            left -= (lastx / CANVAS_WIDTH) * camWidth * 0.1;\n            right += (1.0 - lastx / CANVAS_WIDTH) * camWidth * 0.1;\n            up += (lasty / CANVAS_HEIGHT) * camHeight * 0.1;\n            down -= (1.0 - lasty / CANVAS_HEIGHT) * camHeight * 0.1;\n        }\n    }\n\n    useEffect(() => {\n        document.title = \"Mandelbrot\";\n    });\n\n    let firstDraw = true;\n    let cameraLoc: WebGLUniformLocation;\n    let vertexPosLoc: number;\n    function draw(gl: WebGL2RenderingContext) {\n        if (firstDraw) {\n            const shaderProgram = initShaderProgram(gl, vsSource, fsSource) as WebGLProgram;\n            vertexPosLoc = gl.getAttribLocation(shaderProgram, \"aVertexPos\");\n            cameraLoc = gl.getUniformLocation(shaderProgram, \"cameraInfo\") as WebGLUniformLocation;\n\n            const buffer = initBuffers(gl);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            gl.vertexAttribPointer(\n                vertexPosLoc,\n                2,\n                gl.FLOAT,\n                false,\n                0,\n                0\n            )\n            gl.enableVertexAttribArray(vertexPosLoc);\n            gl.useProgram(shaderProgram);\n        }\n\n        gl.clearColor(1.0,0.0,0.0,1.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        gl.uniform4f(cameraLoc, left, right, up, down);\n\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n\n    function initShaderProgram(gl: WebGL2RenderingContext, vsSource: string, fsSource: string) {\n        const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource) as WebGLShader;\n        const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource) as WebGLShader;\n    \n        const shaderProgram = gl.createProgram() as WebGLProgram;\n        gl.attachShader(shaderProgram, vertexShader);\n        gl.attachShader(shaderProgram, fragmentShader);\n        gl.linkProgram(shaderProgram);\n    \n        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n            alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n            return null;\n        }\n    \n        return shaderProgram;\n    }\n    \n    function loadShader(gl: WebGL2RenderingContext, type: number, source: string) {\n        const shader: WebGLShader = gl.createShader(type) as WebGLShader;\n    \n        gl.shaderSource(shader, source);\n    \n        gl.compileShader(shader);\n    \n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\n            gl.deleteShader(shader);\n            return null;\n        }\n    \n        return shader;\n    }\n\n    // creates a buffer with vertex positions for a simple rectangle that fills the canvas\n    function initBuffers(gl: WebGL2RenderingContext)\n    {\n        const positionBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n        const positions = [\n            -1.0, -1.0,\n            -1.0,  1.0,\n            1.0,  1.0,\n            -1.0, -1.0,\n            1.0,  1.0,\n            1.0, -1.0\n        ];\n\n        gl.bufferData(gl.ARRAY_BUFFER,\n                        new Float32Array(positions),\n                        gl.STATIC_DRAW);\n\n        return positionBuffer;\n    }\n\n\n    return (\n        <div className=\"mainContent\">\n            <Link to=\"/\">Back to main page</Link>\n            <Canvas contextType=\"webgl\" renderFunc={draw} width={CANVAS_WIDTH} height={CANVAS_HEIGHT}\n                mouseDown={e => {\n                    console.log(\"mousedown\");\n                    dragging = true;\n                    lastx = e.offsetX;\n                    lasty = e.offsetY;\n                }}\n\n                mouseUp={e => {\n                    console.log(\"mouseup\");\n                    dragging = false;\n                }}\n\n                mouseMove={e => {\n                    if (dragging)\n                    {\n                        var deltax = e.offsetX - lastx;\n                        var deltay = e.offsetY - lasty;\n\n                        translate(deltax, deltay);\n\n                        // updates last mouse position\n                        lastx = e.offsetX;\n                        lasty = e.offsetY;\n                    }\n                    else\n                    {\n                        lastx = e.offsetX;\n                        lasty = e.offsetY;\n                    }\n                }}\n\n                mouseWheel={e => {\n                    console.log(e.deltaY);\n                    if (e.deltaY < 0)\n                        zoom(true);\n                    else\n                        zoom(false);\n                }}\n\n                keyDown={e => {\n                   switch (e.key) {\n                       case 'r':\n                           left = -CANVAS_WIDTH / CANVAS_HEIGHT;\n                           right = CANVAS_WIDTH / CANVAS_HEIGHT;\n                           up = 1.0;\n                           down = -1.0;\n                           break;\n                        case 'd':\n                            translate(100, 0);\n                            break;\n                        case 'a':\n                            translate(-100, 0);\n                            break;\n                        case 's':\n                            translate(0, 100);\n                            break;\n                        case 'w':\n                            translate(0, -100);\n                            break;\n                        case 'i':\n                            zoom(true);\n                            break;\n                        case 'o':\n                            zoom(false);\n                            break;\n                   }\n                }}\n            />\n            <p>This is made using WebGL. All calculations are done in a fragment shader. \n                Since WebGL (and OpenGL in general) doesn't like to use floats with more precision than 32 bits, \n                it doesn't take much zooming to hit the limit on this. Nevertheless, I still think it's pretty cool. \n                I will try experimenting soon with increasing precision.</p>\n            <p>Click and drag with the mouse or use the arrow keys to pan around. To zoom, use the scroll wheel, or press 'i' to zoom in and 'o' to zoom out. Press 'r' to reset to the original zoom.</p>\n            </div>\n    );\n};\n\nexport default MandelBrot;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport MainPage from './MainPage';\nimport Conductors from './pages/conductors/Conductors';\nimport MsPaintMatrix from './pages/mspaintmatrix/MsPaintMatrix';\nimport PhotoMosaic from './pages/photomosaic/PhotoMosaic';\nimport Mandelbrot from './pages/mandelbrot/Mandelbrot';\nimport Quadtrees from './pages/quadtrees/Quadtrees';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={MainPage} />\n        <Route exact path=\"/conductors\" component={Conductors} />\n        <Route exact path=\"/mspaintmatrix\" component={MsPaintMatrix} />\n        <Route exact path=\"/photomosaic\" component={PhotoMosaic} />\n        <Route exact path=\"/mandelbrot\" component={Mandelbrot} />\n        <Route exact path=\"/quadtrees\" component={Quadtrees} />\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}